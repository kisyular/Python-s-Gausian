

###########################################################################
#Algorithm
#   Prompt the user for values mean and standard deviation
#   print the results of entered
#   the program will compute the inputs the user enterd
#   display the results of generated sum and the mean, both rounded and unrounded
#   show the results of the generated value which meet the following criteria
###########################################################################

import random
random.seed( 0 )

maximum_number=0
minimum_number=9999
total=0
total_sum=0
above_count=0
above_and_within_2_std_count=0
above_and_within_1_std_count=0
at_desired_mean_count=0
below_and_within_1_std_count=0
below_and_within_2_std_count=0
more_than_2_std_count=0
below_count=0


print()
print("This program analyzes Python's Gausian distribution algorithm",)
the_mean=float(input("Now enter the disired mean"))
desired_std_dev=float(input("enter the desired standard deviation"))
value_generated=int(input("enter the value to be generated"))


#   print the results of entered
print()
print("the desired mean is",the_mean )
print("the desired standard deviation is",desired_std_dev )
print("the value to be generated is",value_generated)


#   the program will compute the inputs the user entered
#   the variable "distributn" used below is the random numbers which are generated by the function random.gauss
for value in range(value_generated):
    distributn=random.gauss(the_mean, desired_std_dev)
    if distributn>maximum_number:
        maximum_number=distributn   
    if distributn<minimum_number:
        minimum_number=distributn
    if distributn > (the_mean + 2*desired_std_dev):
        above_count+=1        
    if the_mean <distributn and the_mean + 2*desired_std_dev >distributn >the_mean - 2*desired_std_dev:
        above_and_within_2_std_count+=1       
    if the_mean <distributn and the_mean + 1*desired_std_dev >distributn >the_mean - 1*desired_std_dev:
        above_and_within_1_std_count+=1        
    if distributn == (the_mean*1.0e-6):
        at_desired_mean_count=1        
    if the_mean >distributn and the_mean + 1*desired_std_dev >distributn >the_mean - 1*desired_std_dev:
        below_and_within_1_std_count+=1        
    if the_mean >distributn and the_mean + 2*desired_std_dev >distributn >the_mean - 2*desired_std_dev:
        below_and_within_2_std_count+=1        
    if distributn < (the_mean - 2*desired_std_dev):
        below_count+=1        
    total=total+distributn
    actual_mean=total/value_generated

minimum_number_not_rounded=minimum_number
minimum_number_round=round(minimum_number, 2)
maximum_number_not_rounded=(maximum_number)
maximum_number_round=round(maximum_number, 2)
print()
print("the range without rounding off is",minimum_number_not_rounded,"to", maximum_number_not_rounded)
print("range rounded off is", minimum_number_round,"to", maximum_number_round)


#   display the results of generated sum and the mean, both rounded and unrounded
print()
print("total of generated sum without rounding off is", total)
print("total of generated sum rounded off is", round(total, 2))
print("the actual mean unrounded off is", actual_mean )
print("the actual mean rounded off is", round(actual_mean,2))

#  show the results of the generated value which meet the following criteria
print()
print("The percentage of the generated value more than two standard deviations above the desired mean",above_count, "%")
print("The percentage of the generated value above and within two standard deviations of the desired mean",above_and_within_2_std_count, "%")
print("The percentage of the generated value above and within one standard deviation of the desired mean",above_and_within_1_std_count, "%")
print("The percentage of the generated value at the desired mean (within 1.0e-6 of the desired mean)",at_desired_mean_count, "%")
print("The percentage of the generated value below and within one standard deviation of the desired mean",below_and_within_1_std_count, "%")
print("The percentage of the generated value below and within two standard deviations of the desired mean",below_and_within_2_std_count,"%")
print("The percentage of the generated value more than two standard deviations below the desired mean",below_count, "%")


